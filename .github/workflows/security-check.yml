name: Security Analysis Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-check:
    name: SBOM + Vulnerability Scan + Scorecard
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt update
          sudo apt install -y curl jq

      - name: Install Syft (SBOM)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM (CycloneDX)
        run: |
          syft dir:. -o cyclonedx-json > sbom.json

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Grype Scan (dir)
        run: |
          grype dir:. -o json > grype-results.json || true

      - name: Run OpenSSF Scorecard
        uses: ossf/scorecard-action@v2.1.2
        with:
          results_file: scorecard-results.json
          results_format: json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true



      - name: Generate Text Report
        run: |
          echo "Sicherheitsbericht – GitHub Repo" > security-report.txt

          echo -e "\n== Abhängigkeiten (SBOM) ==" >> security-report.txt
          if [ -f sbom.json ]; then
            jq -r '.components[]? | "- \(.name): \(.version) (\(.type))"' sbom.json >> security-report.txt || echo "Fehler beim Lesen der SBOM" >> security-report.txt
          else
            echo "SBOM-Datei fehlt" >> security-report.txt
          fi

          echo -e "\n== Gefundene Schwachstellen (Grype) ==" >> security-report.txt
          if [ -s grype-results.json ]; then
            jq -r '.matches[]? | "- \(.vulnerability.id) in \(.artifact.name)@\(.artifact.version) [\(.vulnerability.severity)]"' grype-results.json >> security-report.txt || echo "Fehler beim Lesen der Grype-Datei" >> security-report.txt
          else
            echo "Grype-Ergebnisse fehlen oder leer" >> security-report.txt
          fi

          echo -e "\n== Scorecard ==" >> security-report.txt
          if [ -s scorecard-results.json ]; then
            SCORE=$(jq '.scorecard.score' scorecard-results.json 2>/dev/null || echo "N/A")
            echo "- Score: ${SCORE} / 10" >> security-report.txt
            jq -r '.scorecard.checks[]? | "- \(.name): \(.score) – \(.reason)"' scorecard-results.json >> security-report.txt || echo "Fehler bei Scorecard-Auswertung" >> security-report.txt
          else
            echo "Scorecard-Datei fehlt oder leer" >> security-report.txt
          fi

      - name: Upload Textreport
        uses: actions/upload-artifact@v4
        with:
          name: security-text-report
          path: security-report.txt
